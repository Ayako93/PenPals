openapi: 3.0.0
info:
  title: Penpals API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 0.0.1
servers:
- url: http://localhost:1312/V1
paths:
#
#### LOGIN paths:
#
  /login:
    post:
      tags:
      - Public
      summary: Login endpoint
      operationId: login
      requestBody:
        description: Login data
        content:
          application/json:
            schema:
              required:
              - username
              - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful, returns token
          headers:
            X-Pp-Token:
              description: The computed token
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                - status
                - code
                - message
                - payload
                properties:
                  status:
                    type: string
                  code:
                    type: string
                  message:
                    type: string
                  payload:
                    type: object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
                      authTokencontrolToken:
                        type: string
        401:
          description: Login failed. check your credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
#
#### /LOGIN paths:
#
#############################################################################
#
#### /LOGIN paths:
#
  /paramTestsPath/{integerParam}/{booleanParam}/{stringParam}/{doubleParam}:
    get:
      tags:
      - pets
      summary: This path is only for tests
      operationId: paramTestsPath
      parameters:
      - name: integerParam
        in: path
        description: Integer parameter to test validation
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: booleanParam
        in: path
        description: Boolean parameter to test validation
        required: true
        style: simple
        explode: false
        schema:
          type: boolean
      - name: stringParam
        in: path
        description: string parameter to test validation
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: doubleParam
        in: path
        description: string parameter to test validation
        required: true
        style: simple
        explode: false
        schema:
          type: number
      responses:
        200:
          description: An paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-router-controller: petsController
  /responseBodyTest:
    get:
      tags:
      - pets
      summary: should return an object with both right and wrong properties
      operationId: responseBodyTest
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseTest'
      x-router-controller: petsController
  /pets:
    get:
      tags:
      - pets
      summary: List all pets
      operationId: listPets
      parameters:
      - name: limit
        in: query
        description: How many items to return at one time (max 100)
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: An paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - pets
      summary: Create a pet
      operationId: createPets
      requestBody:
        description: Pet to add to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
        x-name: pet
      responses:
        201:
          description: Update status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes all the pets
      operationId: deletePets
      responses:
        204:
          description: pets deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pets/{petId}:
    get:
      tags:
      - pets
      summary: Info for a specific pet
      operationId: showPetById
      parameters:
      - name: petId
        in: path
        description: The id of the pet to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        404:
          description: pet not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: updates a pet based on its petId
      operationId: updatePet
      parameters:
      - name: petId
        in: path
        description: ID of pet to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Pet to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
        x-name: pet
      responses:
        200:
          description: pet updated
        404:
          description: pet not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      parameters:
      - name: petId
        in: path
        description: The id of the pet to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        204:
          description: pet deleted
        404:
          description: pet not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
components:
  schemas:
    ## USER SCHEMA ##
    User:
      required: 
      - username
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        authTokencontrolToken:
          type: string
    ## API RESPONSE SCHEMA ##
    ApiResponse:
      required:
      - status
      - code
      - message
      properties:
        status:
          type: string
          example: "KO" 
        code:
          type: string
          example: "A-SHORT-DESCRIPTIVE-CODE"
        message:
          type: string
          example: "A verbose message about whats going on"
          
