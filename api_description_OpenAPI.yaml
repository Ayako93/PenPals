openapi: 3.0.0
info:
  title: Penpals API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 0.0.1
servers:
- url: http://localhost:1312/V1
paths:
#############################################
# ██████╗  █████╗ ████████╗██╗  ██╗███████╗ #
# ██╔══██╗██╔══██╗╚══██╔══╝██║  ██║██╔════╝ #
# ██████╔╝███████║   ██║   ███████║███████╗ #
# ██╔═══╝ ██╔══██║   ██║   ██╔══██║╚════██║ #
# ██║     ██║  ██║   ██║   ██║  ██║███████║ #
# ╚═╝     ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚══════╝ #
#############################################
#### LOGIN 
#
  /login:
    post:
      tags:
      - User
      summary: (PUBLIC) Login endpoint
      operationId: login
      requestBody:
        description: Login data
        content:
          application/json:
            schema:
              required:
              - username
              - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful, returns token
          headers:
            X-Pp-Token:
              description: The computed token
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                - status
                - code
                - message
                - payload
                properties:
                  status:
                    type: string
                    example: "OK"
                  code:
                    type: string
                    example: "USER-LOGGED-IN"
                  message:
                    type: string
                    example: "User logged in successfully."
                  payload:
                    $ref: '#/components/schemas/User'
        401:
          description: Login failed. check your credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
#
#### /LOGIN 
#############################################################################
#
#### Dashboard
#
  /users:
    get:
      tags:
      - User
      summary: Get the dashboard user data
      operationId: dashboard
      parameters:
      - name: username
        in: header
        description: string containing the logged username
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: X-Pp-Token
        in: header
        description: string containing the logged user's token
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Logged user's dashboard info
          content:
            application/json:
              schema:
                required:
                - status
                - code
                - message
                - user
                properties:
                  status:
                    type: string
                    example: "OK"
                  code:
                    type: string
                    example: "DASHBOARD-INFO"
                  message:
                    type: string
                    example: "Dashboard info succesfully obtained."
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      username:
                        type: string
                        example: "ExampleUsername"
        401:
          description: Login failed. check your credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      
###############################################################      

##############################################################################################
#  ██████╗ ██████╗ ███╗   ███╗██████╗  ██████╗ ███╗   ██╗███████╗███╗   ██╗████████╗███████╗ #
# ██╔════╝██╔═══██╗████╗ ████║██╔══██╗██╔═══██╗████╗  ██║██╔════╝████╗  ██║╚══██╔══╝██╔════╝ #
# ██║     ██║   ██║██╔████╔██║██████╔╝██║   ██║██╔██╗ ██║█████╗  ██╔██╗ ██║   ██║   ███████╗ #
# ██║     ██║   ██║██║╚██╔╝██║██╔═══╝ ██║   ██║██║╚██╗██║██╔══╝  ██║╚██╗██║   ██║   ╚════██║ #
# ╚██████╗╚██████╔╝██║ ╚═╝ ██║██║     ╚██████╔╝██║ ╚████║███████╗██║ ╚████║   ██║   ███████║ #
# ╚═════╝ ╚═════╝ ╚═╝     ╚═╝╚═╝      ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝  #
 #############################################################################################
components:
  schemas:
    ## USER SCHEMA ##
    User:
      required: 
      - username
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        authTokencontrolToken:
          type: string
    ## CONTACT REQUEST ##
    ContactRequest:
      required: 
      - id
      properties:
        id:
          type: integer
        user: 
          $ref: '#/components/schemas/User'
        contactResponses:
          type: array
          items:
            $ref: '#/components/schemas/ContactResponse'
        usersDelivered:
          type: array
          items: 
            $ref: '#/components/schemas/User'
        requestText:
          type: string
        requestCreateTime:
          type: string
          format: date-time
        isActive:
          type: integer
    ## CONTACT RESPONSE ##
    ContactResponse :
      required: 
      - id
      - contactRequest
      properties:
        id:
          type: integer
        contactRequest:
          $ref: '#/components/schemas/ContactRequest'
        user: 
          $ref: '#/components/schemas/User'
        recipient: 
          $ref: '#/components/schemas/User'
        responseText:
          type: string
        resposeCreateTime:
          type: string
          format: date-time
        isActive:
          type: integer
        isDelivered:
          type: integer
    ## API RESPONSE SCHEMA ##
    ApiResponse:
      required:
      - status
      - code
      - message
      properties:
        status:
          type: string
          example: "KO" 
        code:
          type: string
          example: "A-SHORT-DESCRIPTIVE-CODE"
        message:
          type: string
          example: "A verbose message about whats going on"
